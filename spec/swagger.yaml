# This is an **example** API to demontstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - http # Remove if your API doesn't support HTTP
  - https # Remove if your API donsn't support HTTPS
host: example.com # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: /api/v1 # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is an **example** API to demontstrate features of OpenAPI specification
    # Introduction
    This specification is intended to to be a good starting point for describint your API in
    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).
    It also demonstrates features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and
    [ReDoc](https://github.com/Rebilly/ReDoc) documentation engine. So beyond the standard OpenAPI syntax we use a few
    [vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).

    # OpenAPI Specification
    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.

  version: '1.0.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.

  title: Example.com # Replace with your API title
  # Keep it simple. Don't add "API" or verison at the end of the string.

  termsOfService: 'https://example.com/terms/' # [Optional] Replace with an URL to your ToS
  contact:
    email: contact@example.com # [Optional] Replace with your contact email
    url: 'http://example.com/contact' # [Optional] Replace with link to your contact form
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://apis.guru/openapi-template/logo.png'
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
produces:
  - application/vnd.api+json
consumes:
  - application/json
tags:
  - name: Check Ins
    description: Checkin Operations
securityDefinitions:
  OAuth2: # security definition name (you can name it as you want)
    type: oauth2 # authorization type, one of: oauth2, basic, apiKey
    # the following options are specific to oauth2 type
    authorizationUrl: 'http://example.com/api/oauth/dialog'
    flow: implicit
    scopes:
      read_checkins: read checkin for a membership
      checkins: perform chckins


# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL.
paths:

  '/check_ins/':
    post:
      tags:
        - Check Ins
      summary: Check In with credentials
      description: |
        checkin with a check in token or login / password
      operationId: checkInWithCreds
      security:
        - OAuth2:
          - checkins
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/checkin_requests'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/checkins'
          examples:
            application/vnd.api+json:
              data:
                id: a8c12f62ac8df98d29de357180d673e1
                type: checkins
                attributes:
                  start: 2018-12-06T10:00:00Z
                  stop: 2018-12-06T11:00:00Z
                relationships:
                  memberhip:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: memberships
                  space:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: spaces
                  time_pass:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: time_passes

        403:
          description: Forbidden
        404:
          description: Not found
  '/check_ins/{checkinId}':
    get:
      tags:
        - Check Ins
      summary: Get check-in details
      operationId: getCheckIn
      security:
        - OAuth2:
          - checkins
      parameters:
        - name: checkinId
          in: path
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/checkins'
          examples:
            application/vnd.api+json:
              data:
                id: a8c12f62ac8df98d29de357180d673e1
                type: checkins
                attributes:
                  start: 2018-12-06T10:00:00Z
                  stop: 2018-12-06T11:00:00Z
                relationships:
                  memberhip:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: memberships
                  space:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: spaces
                  time_pass:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: time_passes

        403:
          description: Forbidden
        404:
          description: Not found



  '/memberships/{membershipId}/check_ins/current':
    parameters:
      - name: membershipId
        in: path
        description: 'The id of the membership the checkins belong to.'
        required: true
        type: string
      - name: stop
        in: query
        type: string
        format: date-time
        description: 'Optional end time - possible to check a member out in the past'
    delete:
      tags:
        - Check Ins
      summary: Check out a member
      operationId: checkOut
      security:
        - OAuth2:
          - read_checkins
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/checkins'
          examples:
            application/vnd.api+json:
              data:
                id: a8c12f62ac8df98d29de357180d673e1
                type: checkins
                attributes:
                  start: 2018-12-06T10:00:00Z
                  stop: 2018-12-06T11:00:00Z
                relationships:
                  memberhip:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: memberships
                  space:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: spaces
                  time_pass:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: time_passes

        403:
          description: Forbidden
        404:
          description: Member not found



  '/memberships/{membershipId}/check_ins':

    parameters:
      - name: membershipId
        in: path
        description: 'The id of the membership the checkins belong to.'
        required: true
        type: string

    # parameters list that are used with each operation for this path
    post:
      tags:
        - Check Ins
      summary: Check In a member
      description: |
        Check a member in into a given space
      operationId: checkIn
      security:
        - OAuth2:
          - checkins
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/checkin_requests'

      responses:
        200:
          description: Success
          schema: # response schema can be specified for each response
            $ref: '#/definitions/checkins'
          examples:
          # repsonse samples for each type operation produces
            application/vnd.api+json:
              data:
                id: a8c12f62ac8df98d29de357180d673e1
                type: checkins
                attributes:
                  start: 2018-12-06T10:00:00Z
                relationships:
                  memberhip:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: memberships
                  space:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: spaces
                  time_pass:
                    data:
                      id: c9a99a71ac8df98d29de357180d273d3
                      type: time_passes
        403:
          description: Forbidden
        404:
          description: Membership not found





    get:
      tags:
        - Check Ins

      # summary is up to 120 symbold but we recommend to be shortest as possible
      summary: Get member check-ins

      description: |
        Get user check-ins in the given time range, across the network (if space is part of one)
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown

      # operationId should be unique across the whole specification
      operationId: getUserCheckIn


      # list of parameters for the operation
      parameters:
        - name: from
          in: query # place where paramter is passed: path, header, query or body, formData
          description: From date
          # type of the paramter: string, number, integer, boolean, array
          type: string
          format: date-time
        - name: to
          in: query # place where paramter is passed: path, header, query or body, formData
          description: To date
          # type of the paramter: string, number, integer, boolean, array
          type: string
          format: date-time

      # security schemas applied to this operation
      security:
        - OAuth2:
          - read_checkins
      # overwriting default global produces
      produces:
        - application/vnd.api+json
      responses: # list of responses
        200:
          description: Success
          schema: # response schema can be specified for each response
            $ref: '#/definitions/checkins'
          examples:
          # repsonse samples for each type operation produces
            application/vnd.api+json:
              data:
                - id: a8c12f62ac8df98d29de357180d673e1
                  type: checkins
                  attributes:
                    start: 2018-12-06T10:00:00Z
                    stop: 2018-12-06T11:00:00Z
                  relationships:
                    memberhip:
                      data:
                        id: c9a99a71ac8df98d29de357180d273d3
                        type: memberships
                    space:
                      data:
                        id: c9a99a71ac8df98d29de357180d273d3
                        type: spaces
                    time_pass:
                      data:
                        id: c9a99a71ac8df98d29de357180d273d3
                        type: time_passes
        403:
          description: Forbidden
        404:
          description: Membership not found
# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  checkin_requests:
    type: object
    additionalProperties: false
    required:
      - type
      - attributes
      - relationships
    properties:
      type:
        type: 'string'
        pattern: "checkin_requests"
        example: checkin_requests
      attributes:
        type: object
        additionalProperties: false
        properties:
          token:
            type: string
            example: Optional RFID token
            description: used if membershipId is not present (optional)
          login:
            type: string
            example: Optional login
            description: used if membershipId is not present (optional)
          password:
            type: string
            example: Optional password
            description: used if membershipId is not present (optional)

          start:
            type: string
            format: date-time
            description: the checkin start time - possible to check a user in in the past (optional)
      relationships:
        type: object
        additionalProperties: false
        properties:
          space:
            type: object
            description: the space to check the user in to
            properties:
              data:
                type: object
                example:
                  type: spaces
                  id: 123


  checkins:
    type: object
    required:
      - type
      - attributes
    additionalProperties: false
    properties:
      type:
        type: string
        pattern: "checkins"
      attributes:
        type: object
        additionalProperties: false
        properties:
          start:
            type: string
            format: date-time
          stop:
            type: string
            format: date-time
